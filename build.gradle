buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'org.spongepowered.mixin'

apply plugin: 'maven-publish'


group = 'dev.sterner'

version = '1.20.1-1.5.2'

java {
    archivesBaseName = 'CreateCockwork'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'official', version: '1.20.1'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'CreateCockwork'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                createcockwork {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'CreateCockwork'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                createcockwork {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'CreateCockwork'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                createcockwork {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'createcockwork', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                createcockwork {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "createcockwork.refmap.json"

    config "createcockwork.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { url "https://maven.shedaniel.me/" }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }

    maven {
        name = "Valkyrien Skies Internal"
        url = 'https://maven.valkyrienskies.org'
    }
}

dependencies {
    //MINECRAFT
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    //CREATE
    implementation fg.deobf("com.simibubi.create:create-${mc_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${mc_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation fg.deobf("maven.modrinth:valkyrien-skies:1.20.1-forge-2.3.0-beta.4")
    implementation fg.deobf("org.valkyrienskies.core:api:1.1.0+ead972f384") { transitive = false }
    implementation fg.deobf("maven.modrinth:kotlin-for-forge:4.5.0")
    implementation fg.deobf("maven.modrinth:eureka:1.20.1-forge-1.3.0-beta.2")
    //implementation fg.deobf("maven.modrinth:create-big-cannons:1.20.1-forge-0.5.2.a")
    //implementation fg.deobf("curse.maven:create-big-cannons-646668:4760923")

    //JEI
    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
    
    //MIXINS
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation 'org.joml:joml-primitives:1.10.0'
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.2.0")) {
        jarJar.ranged(it, "[0.2.0,)")
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "createcockwork",
                "Specification-Vendor"    : "mrsterner",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "mrsterner",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {

        }
    }
}
